
*************************************************************************************************************
learnjavaonline.org
*************************************************************************************************************

=============================================================================================================

01. Learn the Basics

  01.001. Hello World!
  01.002. Variables and Types
  01.003. Conditionals
  01.004. Arrays
  01.005. Loops
  01.006. Functions
  01.007. Objects
  01.008. Compiling and Running with Arguments

02. Advanced Topics

03. Contributing Tutorials

=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
01. Learn the Basics
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.001. Hello World!
=============================================================================================================

Java is an object oriented language (OOP). Objects in Java are called "classes".

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------
/*
Let's go over the Hello world program, which simply prints "Hello, World!" to the screen.
*/

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
----------------------------------------------------------------

>>>
Hello, World!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

The first line defines a class called Main.

----------------------------------------------------------------
public class Main {
----------------------------------------------------------------

In Java, every line of code that can actually run needs to be inside a class. This line declares a class named Main, 
which is public, that means that any other class can access it. This is not important for now, so don't worry. 
For now, we'll just write our code in a class called Main, and talk about objects later on.

Notice that when we declare a public class, we must declare it inside a file with the same name (Main.java), 
otherwise we'll get an error when compiling.

When running the examples on the site, we will not use the public keyword, since we write all our code in one file.

The next line is:

----------------------------------------------------------------
public static void main(String[] args) {
----------------------------------------------------------------

This is the entry point of our Java program. the main method has to have this exact signature in order to be able to run our program.

public == again means that anyone can access it.
static == means that you can run this method without creating an instance of Main.
void == means that this method doesn't return any value.
main == is the name of the method.

The arguments we get inside the method are the arguments that we will get when running the program with parameters. 
It's an array of strings. We will use it in our next lesson, so don't worry if you don't understand it all now.

----------------------------------------------------------------
System.out.println("Hello, World!");
----------------------------------------------------------------

System == is a pre-defined class that Java provides us and it holds some useful methods and variables.
out == is a static variable within System that represents the output of your program (stdout).
println == is a method of out that can be used to print a line.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------
/*
Print "Hello, World!" to the console.
*/

public class Main {

    public static void main(String[] args) {

        System.out.println("Hello, World!");

    }

}
----------------------------------------------------------------

>>>
Hello, World!
>>>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.002. Variables and Types
=============================================================================================================

Although Java is object oriented, not all types are objects. It is built on top of basic variable types called primitives.

Here is a list of all primitives in Java:

byte (number, 1 byte)
short (number, 2 bytes)
int (number, 4 bytes)
long (number, 8 bytes)
float (float number, 4 bytes)
double (float number, 8 bytes)
char (a character, 2 bytes)
boolean (true or false, 1 byte)

Java is a strong typed language, which means variables need to be defined before we use them.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Numbers

----------------------------------------------------------------
/*
To declare and assign a number use the following syntax
*/

int myNumber;
myNumber = 5;
----------------------------------------------------------------

################################################################

----------------------------------------------------------------
/*
Or you can combine them:
*/

int myNumber = 5;
----------------------------------------------------------------

################################################################

----------------------------------------------------------------
/*
To define a double floating point number, use the following syntax
*/

double d = 4.5;
d = 3.0;
----------------------------------------------------------------

################################################################

----------------------------------------------------------------
/*
If you want to use float, you will have to cast
*/

float f = (float) 4.5;
----------------------------------------------------------------

################################################################

----------------------------------------------------------------
/*
Or, You can use this
*/

float f = 4.5f (f is a shorter way of casting float)
----------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Characters and Strings

In Java, a character is it's own type and it's not simply a number, so it's not common to put an ascii value in it. 

----------------------------------------------------------------
/*
there is a special syntax for chars
*/

char c = 'g';
----------------------------------------------------------------

################################################################

String == is not a primitive. It's a real type, but Java has special treatment for String.

----------------------------------------------------------------
/*
Here are some ways to use a string
*/

// Create a string with a constructor
String s1 = new String("Who let the dogs out?");
// Just using "" creates a string, so no need to write it the previous way.
String s2 = "Who who who who!";
// Java defined the operator + on strings to concatenate:
String s3 = s1 + s2;
----------------------------------------------------------------

################################################################

There is no operator overloading in Java! The operator + is only defined for strings, you will never see it with other objects, 
only primitives.

----------------------------------------------------------------
/*
You can also concat string to primitives
*/

int num = 5;
String s = "I have " + num + " cookies"; //Be sure not to use "" with primitives.
----------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

boolean

Every comparison operator in java will return the type boolean that not like other languages can only accept two special values: 
true or false.

----------------------------------------------------------------
/*

*/

boolean b = false;
b = true;

boolean toBe = false;
b = toBe || !toBe;
if (b) {
    System.out.println(toBe);
}

int children = 0;
b = children; // Will not work
if (children) { // Will not work
    // Will not work
}
----------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------
/*

*/

----------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

----------------------------------------------------------------
/*

*/

----------------------------------------------------------------

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

=============================================================================================================
01.003.
=============================================================================================================

=============================================================================================================
01.004.
=============================================================================================================

=============================================================================================================
01.005.
=============================================================================================================

=============================================================================================================
01.006.
=============================================================================================================

=============================================================================================================
01.007.
=============================================================================================================

=============================================================================================================
01.008.
=============================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
02.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
03.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
